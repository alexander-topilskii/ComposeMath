package org.example.project.screens.algorithms.linear_algorithms

import androidx.compose.animation.animateColorAsState
import androidx.compose.animation.core.tween
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.key.Key.Companion.O
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import kotlinx.coroutines.delay

const val TWO_POINTERS_SCREEN_GEM = "two_pointers_gem"


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun TwoPointersScreenGem(onBack: () -> Unit) {
    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("–ê–ª–≥–æ—Ä–∏—Ç–º Two Pointers", fontWeight = FontWeight.Bold) },
                navigationIcon = {
                    Button(onClick = onBack) {
                        Text("–Ω–∞–∑–∞–¥")
                    }
                }
            )
        }
    ) { paddingValues ->
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(24.dp)
        ) {
            item {
                SectionTitle("–ß—Ç–æ —Ç–∞–∫–æ–µ Two Pointers?")
                SectionText(
                    "–ê–ª–≥–æ—Ä–∏—Ç–º Two Pointers (–¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è) ‚Äî —ç—Ç–æ –º–æ—â–Ω—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π " +
                            "–º–µ—Ç–æ–¥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –º–∞—Å—Å–∏–≤–∞–º–∏, —Å–ø–∏—Å–∫–∞–º–∏ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞–º–∏. " +
                            "–û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Ö—Ä–∞–Ω—è—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã), " +
                            "–∫–æ—Ç–æ—Ä—ã–µ –¥–≤–∏–∂—É—Ç—Å—è –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
                )
            }

            item {
                SectionTitle("–í–∏–¥—ã –∏ –ø—Ä–∏–º–µ—Ä—ã")
                SectionText(
                    "–ù–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∏–¥—ã: " +
                            "1. **–û–±–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è –¥–≤–∏–∂—É—Ç—Å—è –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.** –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞. " +
                            "2. **–û–¥–∏–Ω —É–∫–∞–∑–∞—Ç–µ–ª—å —Å –Ω–∞—á–∞–ª–∞, –¥—Ä—É–≥–æ–π —Å –∫–æ–Ω—Ü–∞.** –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. " +
                            "–≠—Ç–æ —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º."
                )
            }

            item {
                TwoPointersVisualization()
            }

            item {
                SectionTitle("–ü—Ä–∏–º–µ—Ä: –ü–æ–∏—Å–∫ –ø–∞—Ä—ã —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π")
                SectionText(
                    "–ó–∞–¥–∞—á–∞: –Ω–∞–π—Ç–∏ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ `[2, 7, 11, 15]` –ø–∞—Ä—É —á–∏—Å–µ–ª, " +
                            "—Å—É–º–º–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω–∞ `9`."
                )
            }

            item {
                CodeExample()
            }

            item {
                SectionTitle("–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞")
                SectionText(
                    "üî∏ **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏:** —á–∞—Å—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å $O(n^2)$ –¥–æ $O(n)$.\n" +
                            "üî∏ **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –ø–∞–º—è—Ç–∏:** –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏."
                )
            }
        }
    }
}

@Composable
fun SectionTitle(text: String) {
    Text(
        text = text,
        style = MaterialTheme.typography.headlineSmall,
        fontWeight = FontWeight.Bold,
        modifier = Modifier.padding(bottom = 8.dp)
    )
}

@Composable
fun SectionText(text: String) {
    Text(
        text = text,
        style = MaterialTheme.typography.bodyLarge,
        modifier = Modifier.fillMaxWidth()
    )
}

@Composable
fun TwoPointersVisualization() {
    val array = remember { listOf(2, 7, 11, 15) }
    var leftIndex by remember { mutableStateOf(0) }
    var rightIndex by remember { mutableStateOf(array.size - 1) }
    var found by remember { mutableStateOf(false) }

    LaunchedEffect(Unit) {
        // –°–∏–º—É–ª—è—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        val target = 9
        while (leftIndex < rightIndex && !found) {
            delay(1500)
            val currentSum = array[leftIndex] + array[rightIndex]
            if (currentSum == target) {
                found = true
            } else if (currentSum < target) {
                leftIndex++
            } else {
                rightIndex--
            }
        }
    }

    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è",
                style = MaterialTheme.typography.titleMedium,
                modifier = Modifier.padding(bottom = 16.dp)
            )
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly,
                verticalAlignment = Alignment.CenterVertically
            ) {
                array.forEachIndexed { index, value ->
                    val isLeftPointer = index == leftIndex
                    val isRightPointer = index == rightIndex
                    val isFoundPair = found && (isLeftPointer || isRightPointer)

                    val color by animateColorAsState(
                        targetValue = when {
                            isFoundPair -> Color(0xFF4CAF50) // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–∞—Ä—ã
                            isLeftPointer -> Color(0xFF2196F3) // –°–∏–Ω–∏–π –¥–ª—è –ª–µ–≤–æ–≥–æ —É–∫–∞–∑–∞—Ç–µ–ª—è
                            isRightPointer -> Color(0xFFF44336) // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ —É–∫–∞–∑–∞—Ç–µ–ª—è
                            else -> MaterialTheme.colorScheme.surfaceVariant
                        },
                        animationSpec = tween(durationMillis = 500)
                    )

                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        if (isLeftPointer) {
                            Text(text = "–õ–µ–≤—ã–π", color = color, fontSize = 12.sp)
                        }
                        if (isRightPointer) {
                            Text(text = "–ü—Ä–∞–≤—ã–π", color = color, fontSize = 12.sp)
                        }
                        Card(
                            colors = CardDefaults.cardColors(containerColor = color),
                            shape = RoundedCornerShape(8.dp),
                            modifier = Modifier
                                .padding(top = 4.dp, bottom = 4.dp)
                                .size(60.dp)
                        ) {
                            Box(
                                contentAlignment = Alignment.Center,
                                modifier = Modifier.fillMaxSize()
                            ) {
                                Text(
                                    text = value.toString(),
                                    color = Color.White,
                                    fontSize = 20.sp,
                                    fontWeight = FontWeight.Bold
                                )
                            }
                        }
                    }
                }
            }
            if (found) {
                Text(
                    text = "–ü–∞—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞: ${array[leftIndex]} + ${array[rightIndex]} = 9",
                    style = MaterialTheme.typography.bodyLarge,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF4CAF50),
                    modifier = Modifier.padding(top = 16.dp)
                )
            } else {
                Text(
                    text = "–ò—â–µ–º –ø–∞—Ä—É...",
                    style = MaterialTheme.typography.bodyLarge,
                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                    modifier = Modifier.padding(top = 16.dp)
                )
            }
        }
    }
}

@Composable
fun CodeExample() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text(
                text = "```kotlin\n" +
                        "fun findPairWithSum(arr: IntArray, target: Int): Pair<Int, Int>? {\n" +
                        "    var left = 0\n" +
                        "    var right = arr.size - 1\n" +
                        "\n" +
                        "    while (left < right) {\n" +
                        "        val sum = arr[left] + arr[right]\n" +
                        "\n" +
                        "        when {\n" +
                        "            sum == target -> return Pair(arr[left], arr[right])\n" +
                        "            sum < target -> left++\n" +
                        "            else -> right--\n" +
                        "        }\n" +
                        "    }\n" +
                        "\n" +
                        "    return null\n" +
                        "}\n" +
                        "```",
                fontFamily = FontFamily.Monospace,
                fontSize = 14.sp,
                lineHeight = 18.sp,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}